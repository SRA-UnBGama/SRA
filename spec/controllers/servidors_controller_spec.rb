require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ServidorsController do

  # This should return the minimal set of attributes required to create a valid
  # Servidor. As you add validations to Servidor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { :name => "Alessandro",:matricula => "132131578", :username => "servidor123", :password => "123456789",
                             :password_confirmation => "123456789" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ServidorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all servidors as @servidors" do
      servidor = Servidor.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:servidors)).to eq([])
    end
  end

  
  describe "GET new" do
    it "assigns a new servidor as @servidor" do
      get :new, {}, valid_session
      expect(assigns(:servidor)).to be_a_new(Servidor)
    end
  end

  describe "GET edit" do
    it "assigns the requested servidor as @servidor" do
      servidor = Servidor.create! valid_attributes
      get :edit, {:id => servidor.to_param}, valid_session
      expect(assigns(:servidor)).to eq(servidor)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Servidor" do
        expect {
          post :create, {:servidor => valid_attributes}, valid_session
        }.to change(Servidor, :count).by(0)
      end

      it "assigns a newly created servidor as @servidor" do
        post :create, {:servidor => valid_attributes}, valid_session
        expect(assigns(:servidor)).to be_a(Servidor)
        end

      it "redirects to the homepage" do
        post :create, {:servidor => valid_attributes}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved servidor as @servidor" do
        # Trigger the behavior that occurs when invalid params are submitted
        Servidor.any_instance.stub(:save).and_return(false)
        post :create, {:servidor => {  }}, valid_session
        expect(assigns(:servidor)).to be_a_new(Servidor)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Servidor.any_instance.stub(:save).and_return(false)
        post :create, {:servidor => {  }}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "assigns the requested servidor as @servidor" do
        servidor = Servidor.create! valid_attributes
        put :update, {:id => servidor.to_param, :servidor => valid_attributes}, valid_session
        expect(assigns(:servidor)).to eq(servidor)
      end

      it "redirects to the homepage" do
        servidor = Servidor.create! valid_attributes
        put :update, {:id => servidor.to_param, :servidor => valid_attributes}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end

    describe "with invalid params" do
      it "assigns the servidor as @servidor" do
        servidor = Servidor.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Servidor.any_instance.stub(:save).and_return(false)
        put :update, {:id => servidor.to_param, :servidor => {  }}, valid_session
        expect(assigns(:servidor)).to eq(servidor)
      end

      it "re-renders the 'edit' template" do
        servidor = Servidor.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Servidor.any_instance.stub(:save).and_return(false)
        put :update, {:id => servidor.to_param, :servidor => {  }}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested servidor" do
      servidor = Servidor.create! valid_attributes
      expect {
        delete :destroy, {:id => servidor.to_param}, valid_session
      }.to change(Servidor, :count).by(0)
    end

    it "redirects to the homepage" do
      servidor = Servidor.create! valid_attributes
      delete :destroy, {:id => servidor.to_param}, valid_session
      expect(response).to redirect_to(root_path)
    end
  end

end
