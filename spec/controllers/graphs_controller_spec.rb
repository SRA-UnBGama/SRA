require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GraphsController do

  # This should return the minimal set of attributes required to create a valid
  # Graph. As you add validations to Graph, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { start_date: "01/01/2014", end_date: "02/02/2014", place: 1 } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GraphsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET show" do
    it "assigns the requested graph as @graph" do
      graph = Graph.create! valid_attributes
      get :show, {:id => graph.to_param}, valid_session
      expect(assigns(:graph)).to eq(graph)
    end
  end

  describe "GET new" do
    it "assigns a new graph as @graph" do
      get :new, {}, valid_session
      expect(assigns(:graph)).to be_a_new(Graph)
    end
  end
  
  describe "POST create" do
    describe "with valid params" do
      it "creates a new Graph" do
        expect {
          post :create, {:graph => valid_attributes}, valid_session
        }.to change(Graph, :count).by(0)
      end

      it "assigns a newly created graph as @graph" do
        post :create, {:graph => valid_attributes}, valid_session
        expect(assigns(:graph)).to be_a(Graph)
        expect(assigns(:graph)).not_to be_persisted
      end

     # it "redirects to the created graph" do
      #  post :create, {:graph => valid_attributes}, valid_session
      #  expect(response).to redirect_to graph_path(@graph.id)
     # end
   end

    describe "with invalid params" do
      it "assigns a newly created but unsaved graph as @graph" do
        # Trigger the behavior that occurs when invalid params are submitted
        Graph.any_instance.stub(:save).and_return(false)
        post :create, {:graph => { "start_date" => "invalid value", "end_date" => "invalid value", "place" => "invalid value" }}, valid_session
        expect(assigns(:graph)).to be_a_new(Graph)
      end

     # it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        
        #expect(response).to redirect_to graph_path

     # end
    end
  end

end
