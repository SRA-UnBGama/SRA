# -*- encoding : utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ReportsController do

  login_admin

  let(:valid_attributes) { { start_date: "01/01/2014", end_date: "02/02/2014", place: 1 } }

  before :each do
    type = Type.create(:name => "Multa")
    place = Place.create(name: "Laboratorio", :types => Type.where("name in ('Multa')"))
    Atendimento.create(:created_at => "2014-01-05 14:08:00" , :place => place, :type => type, :user_id => 1)
  end

  after :each do
    Place.where(:name => "Laboratorio").first.destroy
    Type.where(:name => "Multa").first.destroy
  end

  describe "GET new" do
    it "assigns a new report as @report" do
      get :new, {}
      #expect(assigns(:report)).to be_a_new(Report)
    end
  end


  describe "POST create" do

    describe "with valid params" do

      it "assigns a newly created report as @report" do
        post :create, {:report => valid_attributes}
        expect(assigns(:report)).to be_a(Report)
        expect(assigns(:report)).not_to be_persisted
      end

      it "redirects to the created report" do
        post :create, {:report => valid_attributes}
        expect(response.status).to be(200)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Report.any_instance.stub(:save).and_return(false)
        post :create, {:report => {  }}
        expect(response).to redirect_to(new_report_path)
      end
    end
  end

  describe "Graphs to images" do
    let(:valid_svg) { "<div><svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /></svg></div>" }

    it "should save the images from svg" do
      post :save_report_with_graph, {:graphs => {:graph1 => valid_svg, :graph2 => valid_svg, :attributes => valid_attributes}}
      expect(response.status).to be(200)
    end
  end

  describe "Clean svg data" do
    let(:valid_svg) { "<div><svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /><text font-face=\"'Lucida Grande', 'Lucida Sans Unicode, '\" x=\"0\" y=\"15\" fill=\"red\"></text></svg></div>" }

    it "should return just the svg tags" do
      clean_svg_data = ReportsController.new.send(:clean_svg_data, valid_svg)
      clean_svg_data.should_not include("div")
    end

    it "should remove the invalid font-face attributes" do
      clean_svg_data = ReportsController.new.send(:clean_svg_data, valid_svg)
      clean_svg_data.should_not include("'Lucida Grande', 'Lucida Sans Unicode, '")
    end
  end

end
