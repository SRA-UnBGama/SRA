require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ReportsController do

  login_admin

  # This should return the minimal set of attributes required to create a valid
  # Report. As you add validations to Report, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  describe "GET index" do
    it "assigns all reports as @reports" do
      report = Report.create! valid_attributes
      get :index, {}
      expect(assigns(:reports)).to eq([report])
    end
  end

  describe "GET show" do
    it "assigns the requested report as @report" do
      report = Report.create! valid_attributes
      get :show, {:id => report.to_param}
      expect(assigns(:report)).to eq(report)
    end
  end

  describe "GET new" do
    it "assigns a new report as @report" do
      get :new, {}
      expect(assigns(:report)).to be_a_new(Report)
    end
  end

  

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Report" do
        expect {
          post :create, {:report => valid_attributes}
        }.to change(Report, :count).by(1)
      end

      it "assigns a newly created report as @report" do
        post :create, {:report => valid_attributes}
        expect(assigns(:report)).to be_a(Report)
        expect(assigns(:report)).to be_persisted
      end

      it "redirects to the created report" do
        post :create, {:report => valid_attributes}
        expect(response).to redirect_to(Report.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved report as @report" do
        # Trigger the behavior that occurs when invalid params are submitted
        Report.any_instance.stub(:save).and_return(false)
        post :create, {:report => {  }}
        expect(assigns(:report)).to be_a_new(Report)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Report.any_instance.stub(:save).and_return(false)
        post :create, {:report => {  }}
        expect(response).to render_template("new")
      end
    end
  end 

end
